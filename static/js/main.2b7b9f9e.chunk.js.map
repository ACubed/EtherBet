{"version":3,"sources":["images/EB.png","images/NBA_2020_Logo.png","images/LCS_2020_Logo.png","images/NHL_2020_Logo.png","components/Card.js","components/Bar.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCard","styled","div","StyledLogo","img","StyledTitle","h1","Card","name","src","StyledBar","Title","attrs","props","color","StyledImage","Bar","prop","Logo","StyledApp","StyledCardContainer","App","className","NBALOGO","NHLLOGO","LCSLOGO","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+tBCG3C,IAAMC,EAAaC,IAAOC,IAAV,KAcVC,EAAaF,IAAOG,IAAV,KAIVC,EAAcJ,IAAOK,GAAV,KAYFC,EATF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAClB,OACI,kBAACT,EAAD,KACI,kBAACG,EAAD,CAAYM,IAAKA,IACjB,kBAACJ,EAAD,SAAeG,EAAf,O,+hBCxBZ,IAAME,EAAYT,IAAOC,IAAV,KAYTS,EAAQV,IAAOK,GAAGM,OAAM,SAAAC,GAAK,MAAK,CACpCC,MAAOD,EAAMC,OAAS,WADZb,CAAH,KAKE,SAAAY,GAAK,OAAIA,EAAMC,SAGtBC,EAAcd,IAAOG,IAAV,KAeFY,EAVH,SAAAC,GACR,OACI,kBAACP,EAAD,KACI,kBAACK,EAAD,CAAaN,IAAKS,MAClB,kBAACP,EAAD,CAAOG,MAAM,WAAb,SACA,kBAACH,EAAD,c,qcC1BZ,IAAMQ,EAAYlB,IAAOC,IAAV,KAOTkB,EAAsBnB,IAAOC,IAAV,KAuBVmB,EAbH,WACR,OACI,kBAACF,EAAD,CAAWG,UAAU,OACjB,kBAAC,EAAD,MACA,kBAACF,EAAD,KACI,kBAAC,EAAD,CAAMZ,KAAK,MAAMC,IAAKc,MACtB,kBAAC,EAAD,CAAMf,KAAK,MAAMC,IAAKe,MACtB,kBAAC,EAAD,CAAMhB,KAAK,MAAMC,IAAKgB,SCpBlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b7b9f9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EB.8c6389db.png\";","module.exports = __webpack_public_path__ + \"static/media/NBA_2020_Logo.2febb4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/LCS_2020_Logo.16deff09.png\";","module.exports = __webpack_public_path__ + \"static/media/NHL_2020_Logo.4c18a901.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCard = styled.div`\n    margin: 15px;\n    height: 400px;\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    border-radius: 16px;\n    overflow: hidden;\n    background: #329696;\n    box-shadow: 15px 15px 27px black, -15px -15px 27px black;\n    color: white;\n    text-align: center;\n`;\nconst StyledLogo = styled.img`\n    width: auto;\n    height: 200px;\n`;\nconst StyledTitle = styled.h1`\n    color: white;\n`;\nconst Card = ({ name, src }) => {\n    return (\n        <StyledCard>\n            <StyledLogo src={src}></StyledLogo>\n            <StyledTitle> {name} </StyledTitle>\n        </StyledCard>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Logo from '../images/EB.png';\n\nconst StyledBar = styled.div`\n    margin: auto;\n    height: 40px;\n    width: 100%;\n    display: flex;\n    text-align: center;\n    flex-direction: row;\n    justify-content: center;\n    position: relative;\n    background: rgba(256, 256, 256, 0.07);\n`;\n\nconst Title = styled.h1.attrs(props => ({\n    color: props.color || 'black',\n}))`\n    margin: 0;\n    padding: 0;\n    color: ${props => props.color};\n`;\n\nconst StyledImage = styled.img`\n    width: auto;\n    height: 40px;\n`;\n\nconst Bar = prop => {\n    return (\n        <StyledBar>\n            <StyledImage src={Logo} />\n            <Title color=\"#329696\">Ether</Title>\n            <Title>Bet</Title>\n        </StyledBar>\n    );\n};\n\nexport default Bar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Card from './Card.js';\nimport Bar from './Bar.js';\nimport NBALOGO from '../images/NBA_2020_Logo.png';\nimport LCSLOGO from '../images/LCS_2020_Logo.png';\nimport NHLLOGO from '../images/NHL_2020_Logo.png';\n\nconst StyledApp = styled.div`\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n`;\n\nconst StyledCardContainer = styled.div`\n    margin: auto auto;\n    width: 50%;\n    height: 95%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-around;\n`;\n\nconst App = () => {\n    return (\n        <StyledApp className=\"App\">\n            <Bar />\n            <StyledCardContainer>\n                <Card name=\"NBA\" src={NBALOGO} />\n                <Card name=\"NHL\" src={NHLLOGO} />\n                <Card name=\"LCS\" src={LCSLOGO} />\n            </StyledCardContainer>\n        </StyledApp>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}