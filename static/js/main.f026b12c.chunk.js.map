{"version":3,"sources":["images/ether_bet.png","images/NBA_2020_Logo.png","images/LCS_2020_Logo.png","images/NHL_2020_Logo.png","components/Card.js","components/Bar.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCard","styled","div","StyledLogo","img","StyledTitle","h1","Card","name","src","StyledBar","StyledImage","Bar","prop","Logo","StyledApp","StyledCardContainer","App","className","NBALOGO","NHLLOGO","LCSLOGO","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+tBCG3C,IAAMC,EAAaC,IAAOC,IAAV,KAcVC,EAAaF,IAAOG,IAAV,KAIVC,EAAcJ,IAAOK,GAAV,KAYFC,EATF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAClB,OACI,kBAACT,EAAD,KACI,kBAACG,EAAD,CAAYM,IAAKA,IACjB,kBAACJ,EAAD,SAAeG,EAAf,O,saCxBZ,IAAME,EAAYT,IAAOC,IAAV,KAYTS,EAAcV,IAAOG,IAAV,KAaFQ,EARH,SAAAC,GACR,OACI,kBAACH,EAAD,KACI,kBAACC,EAAD,CAAaF,IAAKK,Q,qcChB9B,IAAMC,EAAYd,IAAOC,IAAV,KAOTc,EAAsBf,IAAOC,IAAV,KAuBVe,EAbH,WACR,OACI,kBAACF,EAAD,CAAWG,UAAU,OACjB,kBAAC,EAAD,MACA,kBAACF,EAAD,KACI,kBAAC,EAAD,CAAMR,KAAK,MAAMC,IAAKU,MACtB,kBAAC,EAAD,CAAMX,KAAK,MAAMC,IAAKW,MACtB,kBAAC,EAAD,CAAMZ,KAAK,MAAMC,IAAKY,SCpBlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f026b12c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ether_bet.3af53273.png\";","module.exports = __webpack_public_path__ + \"static/media/NBA_2020_Logo.2febb4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/LCS_2020_Logo.16deff09.png\";","module.exports = __webpack_public_path__ + \"static/media/NHL_2020_Logo.4c18a901.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCard = styled.div`\r\n    margin: 15px;\r\n    height: 400px;\r\n    width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n    border-radius: 16px;\r\n    overflow: hidden;\r\n    background: #329696;\r\n    box-shadow: 15px 15px 27px black, -15px -15px 27px black;\r\n    color: white;\r\n    text-align: center;\r\n`;\r\nconst StyledLogo = styled.img`\r\n    width: auto;\r\n    height: 200px;\r\n`;\r\nconst StyledTitle = styled.h1`\r\n    color: white;\r\n`;\r\nconst Card = ({ name, src }) => {\r\n    return (\r\n        <StyledCard>\r\n            <StyledLogo src={src}></StyledLogo>\r\n            <StyledTitle> {name} </StyledTitle>\r\n        </StyledCard>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Logo from '../images/ether_bet.png';\r\n\r\nconst StyledBar = styled.div`\r\n    margin: auto;\r\n    height: 40px;\r\n    width: 100%;\r\n    display: flex;\r\n    text-align: center;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    position: relative;\r\n    background: rgba(256, 256, 256, 0.07);\r\n`;\r\n\r\nconst StyledImage = styled.img`\r\n    width: auto;\r\n    height: 40px;\r\n`;\r\n\r\nconst Bar = prop => {\r\n    return (\r\n        <StyledBar>\r\n            <StyledImage src={Logo} />\r\n        </StyledBar>\r\n    );\r\n};\r\n\r\nexport default Bar;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from './Card.js';\r\nimport Bar from './Bar.js';\r\nimport NBALOGO from '../images/NBA_2020_Logo.png';\r\nimport LCSLOGO from '../images/LCS_2020_Logo.png';\r\nimport NHLLOGO from '../images/NHL_2020_Logo.png';\r\n\r\nconst StyledApp = styled.div`\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledCardContainer = styled.div`\r\n    margin: auto auto;\r\n    width: 50%;\r\n    height: 95%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst App = () => {\r\n    return (\r\n        <StyledApp className=\"App\">\r\n            <Bar />\r\n            <StyledCardContainer>\r\n                <Card name=\"NBA\" src={NBALOGO} />\r\n                <Card name=\"NHL\" src={NHLLOGO} />\r\n                <Card name=\"LCS\" src={LCSLOGO} />\r\n            </StyledCardContainer>\r\n        </StyledApp>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}